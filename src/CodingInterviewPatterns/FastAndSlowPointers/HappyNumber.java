package CodingInterviewPatterns.FastAndSlowPointers;

import java.util.HashSet;
import java.util.Set;

public class HappyNumber {
    //https://leetcode.com/problems/happy-number/description/
    /**
     * The sumOfSquaredDigits function has a time complexity of O(log n) since it iterates through the digits of the number,
     * 'and the number of digits in a number is logarithmic in its value.
     * <p>
     * In the isHappy function, the slow pointer and the fast pointer both start at the input number,
     * and they move through the sequence of numbers generated by the sumOfSquaredDigits function.
     * The while loop continues until either the fast pointer reaches 1 (indicating a happy number) or
     * the slow pointer and the fast pointer become equal (indicating a cycle). In the worst case scenario,
     * where there is a cycle and the fast pointer never reaches 1,
     * the time complexity is determined by the length of the cycle.
     * <p>
     * Since the sumOfSquaredDigits function is called repeatedly,
     * we can consider the time complexity of the isHappy function in terms of the number of times
     * the sumOfSquaredDigits function is called. Let's denote this number as k.
     * <p>
     * In the worst case, where there is a cycle, the length of the cycle can be at most k.
     * This is because if the length of the cycle is longer than k,
     * the fast pointer would have reached 1 before completing a cycle.
     * <p>
     * Therefore, the time complexity of the isHappy function can be considered as O(k * log n),
     * where k is the number of times the sumOfSquaredDigits function is called before reaching either 1 or a cycle.
     */
    class Solution {
        public boolean isHappy(int n) {
            int slowPointer = n;
            int fastPointer = sumOfSquaredDigits(n);

            while (fastPointer != 1 && slowPointer != fastPointer) {
                slowPointer = sumOfSquaredDigits(slowPointer);
                fastPointer = sumOfSquaredDigits(sumOfSquaredDigits(fastPointer));
            }
            return fastPointer == 1;
        }

        public int sumOfSquaredDigits(int number) {
            int totalSum = 0;
            while (number != 0) {
                int digit = number % 10;
                number = number / 10;
                totalSum += digit * digit;
            }
            return totalSum;
        }
        //https://www.educative.io/module/page/Z4JLg2tDQPVv6QjgO/10370001/4976190424350720/6521272008966144

    }

    class Solution2 {
        private Set<Integer> set = new HashSet<>();

        public boolean isHappy(int n) {
            Set<Integer> seen = new HashSet<>();
            while (!seen.contains(n) && n != 1) {
                seen.add(n);
                n = getSum(n);
            }

            return n == 1;
        }

        private int getSum(int n) {
            int res = 0;
            while (n > 0) {
                int rem = n % 10;
                // rem = 9;
                res += rem * rem;
                n = n / 10;
                //n = 1
            }
            return res;
        }
    }


}
